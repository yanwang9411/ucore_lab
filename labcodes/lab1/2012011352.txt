
练习1

ucore.img是如何生成的：

首先makefile：
$(UCOREIMG): $(kernel) $(bootblock)
$(V)dd if=/dev/zero of=$@ count=10000
$(V)dd if=$(bootblock) of=$@ conv=notrunc
$(V)dd if=$(kernel) of=$@ seek=1 conv=notrunc

ucoreimg 依赖于 kernel   bootblock 两个目标文件

bootlock的生成：
$(bootblock): $(call toobj,$(bootfiles)) | $(call totarget,sign)
    @echo + ld $@
   $(V)$(LD) $(LDFLAGS) -N -e start -Ttext 0x7C00 $^ 
       -o $(call toobj,bootblock)
  @$(OBJDUMP) -S $(call objfile,bootblock) > 
       $(call asmfile,bootblock)
  @$(OBJCOPY) -S -O binary $(call objfile,bootblock) 
      $(call outfile,bootblock)
  @$(call totarget,sign) $(call outfile,bootblock) $(bootblock)

bootblock生成依赖于 totarget sign bootfiles

其中 bootasm 和 bootmain 的生成代码为

生成bootasm命令
gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs \
	-nostdinc  -fno-stack-protector -Ilibs/ -Os -nostdinc \
	-c boot/bootasm.S -o obj/boot/bootasm.o

参数：
	-m32 ：32位机器下
	-gstabs  生成调试信息，便于调试
	-nostdinc  不使用标准库，自己实现系统调用等服务
	-fno-stack-protector  不生成用于检测缓冲区溢出的代码。
	-Os  代码优化。减小代码大小

生成bootmain.o：
gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc \
	-fno-stack-protector -Ilibs/ -Os -nostdinc \
	-c boot/bootmain.c -o obj/boot/bootmain.o

参数：
	-fno-builtin  仅在使用__builtin_前缀时进行进行builtin函数的优化


bin/sign

生成sign的命令为
	gcc -Itools/ -g -Wall -O2 -c tools/sign.c \
	-o obj/sign/tools/sign.o
	gcc -g -Wall -O2 obj/sign/tools/sign.o -o bin/sign

	生成bootblock.o
	 ld -m    elf_i386 -nostdlib -N -e start -Ttext 0x7C00 \
		obj/boot/bootasm.o obj/boot/bootmain.o -o obj/bootblock.o
	参数：
	-m <emulation>  模拟为i386上的连接器
	-nostdlib  不使用标准库
	-N  设置代码段和数据段可读写
	-e <entry>  指定入口为entry
	-Ttext  制定代码段开始位置

拷贝二进制代码bootblock.o到bootblock.out
使用编译好的sign工具处理bootblock.out，生成bootblock
bin/sign obj/bootblock.out bin/bootblock



生成kernel：
$(kernel): tools/kernel.ld
	$(kernel): $(KOBJS)
	@echo + ld $@
	$(V)$(LD) $(LDFLAGS) -T tools/kernel.ld -o $@ $(KOBJS)
	@$(OBJDUMP) -S $@ > $(call asmfile,kernel)
	@$(OBJDUMP) -t $@ | $(SED) '1,/SYMBOL TABLE/d; s/ .* / /; \
		/^$$/d' > $(call symfile,kernel)

           生成kernel，需要 kernel.ld init.o readline.o stdio.o kdebug.o
	kmonitor.o panic.o clock.o console.o intr.o picirq.o trap.o
	trapentry.o vectors.o pmm.o  printfmt.o string.o


生成.o文件的makefile代码为
	$(call add_files_cc,$(call listf_cc,$(KSRCDIR)),kernel,\
	$(KCFLAGS))


其中生成obj/kern/init/init.o

命令：
	gcc -Ikern/init/ -fno-builtin -Wall -ggdb -m32 \
		-gstabs -nostdinc  -fno-stack-protector \
		-Ilibs/ -Ikern/debug/ -Ikern/driver/ \
		-Ikern/trap/ -Ikern/mm/ -c kern/init/init.c \
		-o obj/kern/init/init.o

生成kernel的 makefile的命令：
ld -m    elf_i386 -nostdlib -T tools/kernel.ld -o bin/kernel \
	obj/kern/init/init.o obj/kern/libs/readline.o \
	obj/kern/libs/stdio.o obj/kern/debug/kdebug.o \
	obj/kern/debug/kmonitor.o obj/kern/debug/panic.o \
	obj/kern/driver/clock.o obj/kern/driver/console.o \
	obj/kern/driver/intr.o obj/kern/driver/picirq.o \
	obj/kern/trap/trap.o obj/kern/trap/trapentry.o \
	obj/kern/trap/vectors.o obj/kern/mm/pmm.o \
	obj/libs/printfmt.o obj/libs/string.o

参数：
	-T <scriptfile>  让连接器使用指定的脚本


生成bootlock 和 kernel 后：

生成一个有10000个block的文件，每个block 512 byte
dd if=/dev/zero of=bin/ucore.img count=10000


把bootblock中的内容写到第一个块
dd if=bin/bootblock of=bin/ucore.img conv=notrunc

从第二个块开始写kernel中的内容
dd if=bin/kernel of=bin/ucore.img seek=1 conv=notrunc




[练习1.2] 一个被系统认为是符合规范的硬盘主引导扇区的特征是什么?

答：
一个磁盘主引导扇区只有512字节，倒数第二个byte是0x55，倒数第一个byte是0xAA。 在sign.c文件中可见。




[练习2]

[练习2.1] 从 CPU 加电后执行的第一条指令开始,单步跟踪 BIOS 的执行。


答：修改 lab1/tools/gdbinit,连接到gdb的端口1234，进行通信
set architecture i8086
target remote :1234

make qemu后执行si 即可单步跟踪BIOS。
	x /2i $pc 查看当前指令


[练习2.2] 在初始化位置0x7c00 设置实地址断点,测试断点正常。

在tools/gdbinit里加上
   set architecture i8086 
   b *0x7c00
	
make debug 进入debug模式，看到设置的断点
执行x /2i $pc  输出指令：

	=> 0x7c00:      cli    
	   0x7c01:      cld    
	   0x7c02:      xor    %eax,%eax
	   0x7c04:      mov    %eax,%ds
	   0x7c06:      mov    %eax,%es
	   0x7c08:      mov    %eax,%ss 
	   0x7c0a:      in     $0x64,%al
	   0x7c0c:      test   $0x2,%al
	   0x7c0e:      jne    0x7c0a
	   0x7c10:      mov    $0xd1,%al

[练习2.3] 在调用qemu 时增加-d in_asm -D q.log 参数，便可以将运行的汇编指令保存在q.log 中。
将执行的汇编代码与bootasm.S 和 bootblock.asm 进行比较，看看二者是否一致。

gdb调试时加上
	b *0x7c00

在q.log中读到"call bootmain"前执行的命令

其与bootasm.S和bootblock.asm中的代码相同



 [练习3]
分析bootloader 进入保护模式的过程。

将flag置0和将段寄存器置0
	.code16
	    cli
	    cld
	    xorw %ax, %ax
	    movw %ax, %ds
	    movw %ax, %es
	    movw %ax, %ss

开启A20：通过将键盘控制器上的A20线置于高电位，全部32条地址线可用，
可以访问4G的内存空间。
	seta20.1:               # 等待8042空闲
	    inb $0x64, %al      
	    testb $0x2, %al     
	    jnz seta20.1        
	
	    movb $0xd1, %al  
	    outb %al, $0x64     
	
	seta20.1:             
	    inb $0x64, %al      
	    testb $0x2, %al     
	    jnz seta20.1        
	
	    movb $0xdf, %al     # 打开A20
	    outb %al, $0x60     # 

初始化GDT表：	    lgdt gdtdesc

进入保护模式：通过将cr0寄存器31位置1使能保护模式
代码如下：
	    movl %cr0, %eax
	    orl $CR0_PE_ON, %eax
	    movl %eax, %cr0


设置段寄存器，建立堆栈
	    movw $PROT_MODE_DSEG, %ax
	    movw %ax, %ds
	    movw %ax, %es
	    movw %ax, %fs
	    movw %ax, %gs
	    movw %ax, %ss
	    movl $0x0, %ebp
	    movl $start, %esp

进入boot主方法
	    call bootmain


[练习4]
分析bootloader加载ELF格式的OS的过程。


执行 bootmain 函数：

在bootmain函数中，
	void
	bootmain(void) {
	    // 读取ELF的头部
	    readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);
	
	    // 通过头部判断是否是合法的ELF文件
	    if (ELFHDR->e_magic != ELF_MAGIC) {
	        goto bad;
	    }
	
	    struct proghdr *ph, *eph;
	
	    // 先将描述表的头地址存在ph
	    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);

	   // elf 文件结束的地方	 
	    eph = ph + ELFHDR->e_phnum;
	
	    for (; ph < eph; ph ++) {
	        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
	    }

	    // 根据ELF头部储存的信息，跳转到内核的入口
	    ((void (*)(void))(ELFHDR->e_entry & 0xFFFFFF))();

	}


其中 readseg从设备读取任意长度的内容。
	static void
	readseg(uintptr_t va, uint32_t count, uint32_t offset) {
	    uintptr_t end_va = va + count;
	    va -= offset % SECTSIZE;
	    uint32_t secno = (offset / SECTSIZE) + 1; 
	    // ELF文件从1扇区开始
	
	    for (; va < end_va; va += SECTSIZE, secno ++) {
	        readsect((void *)va, secno);
	    }
	}

其中调用的
`readsect`函数
	static void
	readsect(void *dst, uint32_t secno) {
	    waitdisk();
	
	    outb(0x1F2, 1);                         // 设置读取扇区的数目为1
	    outb(0x1F3, secno & 0xFF);
	    outb(0x1F4, (secno >> 8) & 0xFF);
	    outb(0x1F5, (secno >> 16) & 0xFF);
	    outb(0x1F6, ((secno >> 24) & 0xF) | 0xE0);
	        // 指定扇区号
	    outb(0x1F7, 0x20);                      // 读取扇区
	    waitdisk();
	    insl(0x1F0, dst, SECTSIZE / 4);         // 读到dst
	}


[练习5] 
实现函数调用堆栈跟踪函数 

ss:ebp     储存着caller的ebp。
ss:ebp+4指向caller调用时的eip，ss:ebp+8等是（可能的）参数，此处为4个参数。

最后一行为：
	ebp:0x00007bf8 eip:0x00007d68 \
		args:0x00000000 0x00000000 0x00000000 0x00007c4f
	    <unknow>: -- 0x00007d67 --


堆栈0x7c00开始，使用"call bootmain"转入bootmain函数。
bootmain中ebp为0x7bf8。


[练习6]

[练习6.1] 中断向量表中一个表项占多少字节？其中哪几位代表中断处理代码的入口？

中断向量表一个表项占用8字节，其中2-3字节是段选择子，01字节和67字节组成位移，
段选择子＋位移 形成中断处理程序的入口地址。


